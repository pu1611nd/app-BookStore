// Generated by view binder compiler. Do not edit!
package com.tuan1611pupu.appbansach.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.tuan1611pupu.appbansach.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class RowOrderUserBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final Button btnInvoice;

  @NonNull
  public final Button btnStatus;

  @NonNull
  public final TextView txtDate;

  @NonNull
  public final TextView txtOrder;

  @NonNull
  public final TextView txtStatus;

  @NonNull
  public final TextView txtTel;

  private RowOrderUserBinding(@NonNull CardView rootView, @NonNull Button btnInvoice,
      @NonNull Button btnStatus, @NonNull TextView txtDate, @NonNull TextView txtOrder,
      @NonNull TextView txtStatus, @NonNull TextView txtTel) {
    this.rootView = rootView;
    this.btnInvoice = btnInvoice;
    this.btnStatus = btnStatus;
    this.txtDate = txtDate;
    this.txtOrder = txtOrder;
    this.txtStatus = txtStatus;
    this.txtTel = txtTel;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static RowOrderUserBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RowOrderUserBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.row_order_user, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RowOrderUserBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_invoice;
      Button btnInvoice = ViewBindings.findChildViewById(rootView, id);
      if (btnInvoice == null) {
        break missingId;
      }

      id = R.id.btn_status;
      Button btnStatus = ViewBindings.findChildViewById(rootView, id);
      if (btnStatus == null) {
        break missingId;
      }

      id = R.id.txtDate;
      TextView txtDate = ViewBindings.findChildViewById(rootView, id);
      if (txtDate == null) {
        break missingId;
      }

      id = R.id.txtOrder;
      TextView txtOrder = ViewBindings.findChildViewById(rootView, id);
      if (txtOrder == null) {
        break missingId;
      }

      id = R.id.txtStatus;
      TextView txtStatus = ViewBindings.findChildViewById(rootView, id);
      if (txtStatus == null) {
        break missingId;
      }

      id = R.id.txtTel;
      TextView txtTel = ViewBindings.findChildViewById(rootView, id);
      if (txtTel == null) {
        break missingId;
      }

      return new RowOrderUserBinding((CardView) rootView, btnInvoice, btnStatus, txtDate, txtOrder,
          txtStatus, txtTel);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
