// Generated by view binder compiler. Do not edit!
package com.tuan1611pupu.appbansach.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.tuan1611pupu.appbansach.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class PublisherListviewLayoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button lvBtnDeletePublisher;

  @NonNull
  public final Button lvBtnEditPublisher;

  @NonNull
  public final TextView tvIdPublisher;

  @NonNull
  public final TextView tvPublisherName;

  private PublisherListviewLayoutBinding(@NonNull LinearLayout rootView,
      @NonNull Button lvBtnDeletePublisher, @NonNull Button lvBtnEditPublisher,
      @NonNull TextView tvIdPublisher, @NonNull TextView tvPublisherName) {
    this.rootView = rootView;
    this.lvBtnDeletePublisher = lvBtnDeletePublisher;
    this.lvBtnEditPublisher = lvBtnEditPublisher;
    this.tvIdPublisher = tvIdPublisher;
    this.tvPublisherName = tvPublisherName;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static PublisherListviewLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PublisherListviewLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.publisher_listview_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PublisherListviewLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.lv_btn_delete_publisher;
      Button lvBtnDeletePublisher = ViewBindings.findChildViewById(rootView, id);
      if (lvBtnDeletePublisher == null) {
        break missingId;
      }

      id = R.id.lv_btn_edit_publisher;
      Button lvBtnEditPublisher = ViewBindings.findChildViewById(rootView, id);
      if (lvBtnEditPublisher == null) {
        break missingId;
      }

      id = R.id.tv_idPublisher;
      TextView tvIdPublisher = ViewBindings.findChildViewById(rootView, id);
      if (tvIdPublisher == null) {
        break missingId;
      }

      id = R.id.tv_publisherName;
      TextView tvPublisherName = ViewBindings.findChildViewById(rootView, id);
      if (tvPublisherName == null) {
        break missingId;
      }

      return new PublisherListviewLayoutBinding((LinearLayout) rootView, lvBtnDeletePublisher,
          lvBtnEditPublisher, tvIdPublisher, tvPublisherName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
