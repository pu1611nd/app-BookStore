// Generated by view binder compiler. Do not edit!
package com.tuan1611pupu.appbansach.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.tuan1611pupu.appbansach.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CategoryListviewLayoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button lvBtnDeleteCategory;

  @NonNull
  public final Button lvBtnEditCategory;

  @NonNull
  public final TextView tvCategoryName;

  @NonNull
  public final TextView tvIdCategory;

  private CategoryListviewLayoutBinding(@NonNull LinearLayout rootView,
      @NonNull Button lvBtnDeleteCategory, @NonNull Button lvBtnEditCategory,
      @NonNull TextView tvCategoryName, @NonNull TextView tvIdCategory) {
    this.rootView = rootView;
    this.lvBtnDeleteCategory = lvBtnDeleteCategory;
    this.lvBtnEditCategory = lvBtnEditCategory;
    this.tvCategoryName = tvCategoryName;
    this.tvIdCategory = tvIdCategory;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CategoryListviewLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CategoryListviewLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.category_listview_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CategoryListviewLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.lv_btn_delete_category;
      Button lvBtnDeleteCategory = ViewBindings.findChildViewById(rootView, id);
      if (lvBtnDeleteCategory == null) {
        break missingId;
      }

      id = R.id.lv_btn_edit_category;
      Button lvBtnEditCategory = ViewBindings.findChildViewById(rootView, id);
      if (lvBtnEditCategory == null) {
        break missingId;
      }

      id = R.id.tv_categoryName;
      TextView tvCategoryName = ViewBindings.findChildViewById(rootView, id);
      if (tvCategoryName == null) {
        break missingId;
      }

      id = R.id.tv_idCategory;
      TextView tvIdCategory = ViewBindings.findChildViewById(rootView, id);
      if (tvIdCategory == null) {
        break missingId;
      }

      return new CategoryListviewLayoutBinding((LinearLayout) rootView, lvBtnDeleteCategory,
          lvBtnEditCategory, tvCategoryName, tvIdCategory);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
